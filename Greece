<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Athens & Santorini Itinerary</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      /* Base dark theme for the page */
      background-color: #0F172A; /* Slate-900 */
      color: #CBD5E1; /* Slate-300 */
      overflow-x: hidden; /* Prevent horizontal scroll from mouse parallax */
    }
    /* Position the WebGL canvas behind all content */
    #webgl-canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      opacity: 0.6; /* Soften the background slightly */
    }
    /* Custom dark glassmorphism card style */
    .card {
      background-color: rgba(15, 23, 42, 0.6); /* Slate-900 with 60% opacity */
      backdrop-filter: blur(12px);
      -webkit-backdrop-filter: blur(12px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 1rem; /* 16px */
      padding: 1.25rem; /* 20px */
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    /* Custom dark glassmorphism header style */
    .header-nav {
      background-color: rgba(15, 23, 42, 0.6); /* Slate-900 with 60% opacity */
      backdrop-filter: blur(12px);
      -webkit-backdrop-filter: blur(12px);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
  </style>
  <!-- Tailwind config must be in a script tag in the head -->
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            'copper': {
              '500': '#B87333',
              '600': '#A4662D',
            },
            'mango-gold': '#FFC300',
            'deep-teal': {
              '500': '#008080',
              '700': '#004D4D',
            },
            'midnight-blue': '#0b1026',
          }
        }
      }
    }
  </script>
</head>
<body class="antialiased">

  <!-- WebGL Background -->
  <canvas id="webgl-canvas"></canvas>

  <!-- Header -->
  <header class="sticky top-0 z-20 header-nav">
    <div class="mx-auto max-w-6xl px-4 py-3 flex flex-wrap items-center justify-between gap-2">
      <div>
        <h1 id="main-title" class="text-xl md:text-2xl font-bold text-white">
          <!-- Injected by JS -->
        </h1>
        <p id="sub-title" class="text-slate-300 text-sm">
          <!-- Injected by JS -->
        </p>
      </div>
      <!-- Buttons removed as requested -->
    </div>
  </header>

  <!-- Content -->
  <main class="relative z-10 mx-auto max-w-6xl px-4 py-8 space-y-10">
    
    <!-- Overview -->
    <section class="grid md:grid-cols-2 gap-6">
      <div class="card">
        <h2 class="text-lg font-semibold mb-3 text-slate-100">Flight Cost Comparison</h2>
        <div id="flights-table-container" class="overflow-hidden rounded-xl border border-slate-700/70">
          <!-- Table injected by JS -->
        </div>
        <p id="flights-tip" class="text-xs text-slate-400 mt-2">
          <!-- Tip injected by JS -->
        </p>
      </div>

      <div class="card">
        <h2 class="text-lg font-semibold mb-3 text-slate-100">Where to Stay</h2>
        <ul id="hotels-list-container" class="space-y-3">
          <!-- List injected by JS -->
        </ul>
        <p class="text-xs text-slate-400 mt-2">All nightly rates are indicative; book early for shoulder-season deals.</p>
      </div>
    </section>

    <!-- Quick filters -->
    <section id="filter-buttons" class="flex flex-wrap gap-2">
      <button data-filter="all" class="rounded-full border px-3 py-1 text-sm bg-gray-900/60 backdrop-blur border-slate-600 text-slate-300 hover:bg-gray-700/80 transition-colors">
        All
      </button>
      <button data-filter="culture" class="rounded-full border px-3 py-1 text-sm bg-gray-900/60 backdrop-blur border-slate-600 text-slate-300 hover:bg-gray-700/80 transition-colors">
        Culture
      </button>
      <button data-filter="food" class="rounded-full border px-3 py-1 text-sm bg-gray-900/60 backdrop-blur border-slate-600 text-slate-300 hover:bg-gray-700/80 transition-colors">
        Food
      </button>
      <button data-filter="adventure" class="rounded-full border px-3 py-1 text-sm bg-gray-900/60 backdrop-blur border-slate-600 text-slate-300 hover:bg-gray-700/80 transition-colors">
        Adventure
      </button>
      <button data-filter="stroll" class="rounded-full border px-3 py-1 text-sm bg-gray-900/60 backdrop-blur border-slate-600 text-slate-300 hover:bg-gray-700/80 transition-colors">
        Stroll
      </button>
      <button data-filter="view" class="rounded-full border px-3 py-1 text-sm bg-gray-900/60 backdrop-blur border-slate-600 text-slate-300 hover:bg-gray-700/80 transition-colors">
        Views
      </button>
      <button data-filter="relax" class="rounded-full border px-3 py-1 text-sm bg-gray-900/60 backdrop-blur border-slate-600 text-slate-300 hover:bg-gray-700/80 transition-colors">
        Relax
      </button>
      <button data-filter="transport" class="rounded-full border px-3 py-1 text-sm bg-gray-900/60 backdrop-blur border-slate-600 text-slate-300 hover:bg-gray-700/80 transition-colors">
        Transport
      </button>
    </section>

    <!-- Itinerary -->
    <section id="itinerary" class="space-y-6">
      <div class="flex items-center justify-between">
        <h2 class="text-xl font-semibold text-slate-100">Day-by-Day Timings & Costs</h2>
        <div class="text-sm text-slate-300">Est. spend is per person.</div>
      </div>
      <div id="day-cards-container" class="space-y-6">
        <!-- Day cards injected by JS -->
      </div>
    </section>

    <!-- Notes -->
    <section class="card">
      <h2 class="text-lg font-semibold mb-2 text-slate-100">Notes & Tweaks</h2>
      <ul class="list-disc pl-6 text-slate-300 space-y-1 text-sm">
        <li>Swap sea-kayak (Day 5) for a jet-ski volcano safari (≈£214) if you prefer adrenaline over paddling.</li>
        <li>For a calmer pace, replace scuba (Day 6) with a winery tour (Assyrtiko tastings) and a long lunch in Pyrgos.</li>
        <li>Rooftop dinners in Athens (Days 1–2) and caldera-view dinners in Santorini (Days 4–6) are your headline romantic moments.</li>
        <li>Educational depth: combine Acropolis + Museum + Agoras for a full arc from myth & architecture to democracy in practice.</li>
      </ul>
    </section>
  </main>

  <footer class="relative z-10 mx-auto max-w-6xl px-4 py-10 text-center text-slate-400 text-sm">
    Itinerary by @leo
  </footer>

  <!-- 
    ====================================================================
    APP LOGIC & DATA
    ====================================================================
  -->
  <script>
    // --- Core Data & State ---
    let activeFilters = new Set();
    let webGLApi = { setMode: () => {} }; // Dummy API

    // --- DATA OBJECT ---
    const data = {
      meta: {
        title: "One-Week Romantic & Intellectual Itinerary — Athens & Santorini",
        when: "Mid-April (7 days / 6 nights)",
        currencyNote: "Note: All prices are estimates *per person* (pp) in GBP.",
      },
      flights: [
        { route: "London → Athens", cost: 37, note: "Early AM departure to land ~13:00." },
        { route: "Athens → Santorini (JTR)", cost: 31, note: "~1h flight, morning of Day 4." },
        { route: "Santorini → London (direct)", cost: 134, note: "Convenient but pricier." },
        { route: "Santorini → Athens → London (2 legs)", cost: 68, note: "Cheaper than direct; connect in ATH." },
      ],
      hotels: [
        { city: "Athens", tier: "Budget", range: "£30–£43 / night", example: "Small hotel/guesthouse in Plaka/Monastiraki" },
        { city: "Athens", tier: "Mid-range", range: "£60–£100 / night", example: "Boutique hotel in Koukaki/Syntagma (often w/ rooftop)" },
        { city: "Santorini", tier: "Budget", range: "£39 / night", example: "Cave-style hostel/private room in Karterados" },
        { city: "Santorini", tier: "Mid-range", range: "£56 pp / night", example: "Family-run hotel in Akrotiri w/ pool & caldera view" },
      ],
      days: [
        {
          id: 1,
          date: "Mon Day 1 — Athens (Arrival, Plaka & Stadium)",
          total: 49,
          items: [
            { t: "07:00–13:00", a: "Flight London → Athens", cost: 37, cat: "travel", why: "Maximise time by landing early afternoon." },
            { t: "13:30", a: "Hotel check-in (Plaka/Koukaki)", cost: 0, cat: "stay", why: "Walkable to landmarks; romantic neighbourhood vibe." },
            { t: "14:00", a: "Plaka lunch (meze/gyro)", cost: 13, cat: "food", why: "Classic taverna fare among neoclassical lanes." },
            { t: "15:00", a: "Mnisikleous Stairs & Plaka wander", cost: 0, cat: "stroll", why: "Pastel houses, Byzantine chapels — photogenic & calm." },
            { t: "16:30", a: "Panathenaic Stadium entry", cost: 10.3, cat: "culture", why: "All-marble Olympic stadium — sport & history combined." },
            { t: "18:00", a: "National Garden & Syntagma (guards)", cost: 0, cat: "stroll", why: "Green respite + ceremonial history." },
            { t: "19:30", a: "Rooftop dinner w/ Acropolis view", cost: 21.4, cat: "food", why: "Sunset over the Parthenon = instant romance." },
          ],
        },
        {
          id: 2,
          date: "Tue Day 2 — Athens (Acropolis, Museum, Agoras, Lycabettus)",
          total: 88.8,
          items: [
            { t: "08:00", a: "Bakery breakfast (coffee + spanakopita)", cost: 4.3, cat: "food", why: "Quick fuel before crowds build." },
            { t: "08:30–10:30", a: "Acropolis (Parthenon, Erechtheion)", cost: 25.6, cat: "culture", why: "Democracy & myth in situ — core intellectual stop." },
            { t: "10:45–12:15", a: "Acropolis Museum", cost: 12.8, cat: "culture", why: "Caryatids & Parthenon galleries; superb curation." },
            { t: "12:30", a: "Lunch (Koukaki/Plaka)", cost: 12.8, cat: "food", why: "Great mezze / souvlaki options." },
            { t: "14:00–15:30", a: "Ancient Agora (Stoa, Hephaestus)", cost: 8.5, cat: "culture", why: "Birthplace of civic life; philosophy walk." },
            { t: "16:00–16:45", a: "Roman Agora / Hadrian’s Library (opt)", cost: 8.5, cat: "culture", why: "Later Roman layer + Tower of the Winds." },
            { t: "18:15", a: "Lycabettus Hill sunset (walk/funicular)", cost: 0, cat: "view", why: "Panoramic, intimate golden hour." },
            { t: "19:30", a: "Dinner (rooftop or hill)", cost: 21.4, cat: "food", why: "City lights + Aegean horizon." },
          ],
        },
        {
          id: 3,
          date: "Wed Day 3 — Athens (Nat. Archaeology, Monastiraki, Riviera)",
          total: 64.9,
          items: [
            { t: "08:00", a: "Breakfast", cost: 4.3, cat: "food", why: "Start light before museums." },
            { t: "08:30–10:30", a: "National Archaeological Museum", cost: 10.3, cat: "culture", why: "Cycladic art, Antikythera mechanism — brain food." },
            { t: "10:45", a: "Coffee break", cost: 3.4, cat: "food", why: "Freddo cappuccino time." },
            { t: "11:00–12:30", a: "Temple of Olympian Zeus or Kerameikos", cost: 8.5, cat: "culture", why: "Colossal columns or ancient funerary rites." },
            { t: "13:00", a: "Lunch @ Monastiraki", cost: 12.8, cat: "food", why: "Gyro plate & people-watching." },
            { t: "14:00–15:30", a: "Monastiraki Flea Market", cost: 0, cat: "stroll", why: "Antique books, vinyl, curios for souvenirs." },
            { t: "16:00–17:00", a: "Tram to Athens Riviera (Flisvos/Voula)", cost: 2.1, cat: "transport", why: "Sea breeze change-of-scene." },
            { t: "19:30", a: "Seaside dinner (Mikrolimano)", cost: 25.6, cat: "food", why: "Seafood + sunset reflections." },
          ],
        },
        {
          id: 4,
          date: "Thu Day 4 — Fly to Santorini, Fira + Volcano & Hot Springs",
          total: 84.5,
          items: [
            { t: "06:30", a: "Light breakfast", cost: 4.3, cat: "food", why: "Early flight day." },
            { t: "08:00–09:00", a: "Flight ATH → JTR", cost: 31, cat: "travel", why: "Quick hop to the Cyclades." },
            { t: "09:30", a: "Hotel check-in (Fira/Karterados/Akrotiri)", cost: 0, cat: "stay", why: "Choose vibe: lively Fira or quiet Akrotiri." },
            { t: "10:30", a: "Fira old town wander", cost: 0, cat: "stroll", why: "White lanes, galleries, bookshops." },
            { t: "11:30", a: "Lunch in Fira", cost: 14.5, cat: "food", why: "Tomato keftedes / white auberrine." },
            { t: "12:30", a: "Cable car to Old Port", cost: 5.1, cat: "transport", why: "Dramatic caldera descent." },
            { t: "13:00–16:00", a: "Boat: Volcano walk + Hot Springs swim", cost: 25 + 4.3, cat: "adventure", why: "Lunar lava fields + mineral waters = unique date." },
            { t: "16:30", a: "Cable car back up", cost: 5.1, cat: "transport", why: "Skip the 587 steps." },
            { t: "17:00", a: "Rooftop coffee", cost: 4.3, cat: "food", why: "Ships glide across the caldera." },
            { t: "19:00", a: "Dinner w/ caldera view (Fira/Imerovigli)", cost: 25.6, cat: "food", why: "Sunset scene you’ll remember." },
          ],
        },
        {
          id: 5,
          date: "Fri Day 5 — Oia, Ammoudi Bay & Sea-Kayaking",
          total: 131.2,
          items: [
            { t: "08:00", a: "Breakfast", cost: 6, cat: "food", why: "Energy for an active day." },
            { t: "08:30", a: "Bus Fira → Oia (ret ~£3.1)", cost: 3.1, cat: "transport", why: "Scenic ridge ride." },
            { t: "09:15–10:30", a: "Oia alleys & blue domes", cost: 0, cat: "stroll", why: "Iconic photos & galleries." },
            { t: "10:30–11:30", a: "Descend to Ammoudi Bay (300 steps)", cost: 0, cat: "stroll", why: "Red cliffs, turquoise water, fishing boats." },
            { t: "11:30", a: "Seafood lunch @ Ammoudi", cost: 21.3, cat: "food", why: "Grilled octopus by the water." },
            { t: "13:00–17:00", a: "Sea-kayak (Red & White Beaches)", cost: 68.3, cat: "adventure", why: "Private coves + snorkel; adventurous & intimate." },
            { t: "18:00", a: "Golden-hour drink in Oia", cost: 6.8, cat: "food", why: "Sundowner before the big show." },
            { t: "19:30", a: "Dinner in Oia (rooftop taverna)", cost: 25.6, cat: "food", why: "Candle-lit caldera views." },
          ],
        },
        {
          id: 6,
          date: "Sat Day 6 — Scuba, Perissa Beach & Imerovigli Dinner",
          total: 136.6,
          items: [
            { t: "07:30", a: "Breakfast", cost: 6, cat: "food", why: "Light & quick." },
            { t: "08:30–11:30", a: "Discover Scuba (Caldera reef)", cost: 76.9, cat: "adventure", why: "Marine life over volcanic shelves." },
            { t: "12:00", a: "Lunch @ Perissa/Perivolos", cost: 17.1, cat: "food", why: "Beachside tavernas, relaxed vibe." },
            { t: "13:00–15:00", a: "Sunbeds & swim", cost: 6.4, cat: "relax", why: "Cost is per person (based on a shared ~£12.8 bed)." },
            { t: "15:30", a: "Fira cafés & bookshops", cost: 4.3, cat: "food", why: "Pick up an Aegean read." },
            { t: "19:00", a: "Romantic dinner @ Imerovigli", cost: 29.9, cat: "food", why: "Quieter than Oia, stunning sunsets." },
          ],
        },
        {
          id: 7,
          date: "Sun Day 7 — Home via Athens",
          total: 41.3,
          items: [
            { t: "06:00", a: "Quick breakfast", cost: 4.3, cat: "food", why: "Early start." },
            { t: "07:00", a: "Flight JTR → ATH", cost: 31, cat: "travel", why: "Connection buffer." },
            { t: "10:30", a: "Flight ATH → London", cost: 37, cat: "travel", why: "Return with memories." },
          ],
        },
      ],
    };

    // --- RENDER FUNCTIONS ---

    /**
     * Returns the Tailwind CSS classes for a given activity category.
     */
    function catColor(cat) {
      const styles = {
        travel: { badge: "bg-violet-900 text-violet-300" },
        stay: { badge: "bg-slate-700 text-slate-300" },
        food: { badge: "bg-rose-900 text-rose-300" },
        culture: { badge: "bg-blue-900 text-blue-300" },
        stroll: { badge: "bg-amber-800 text-amber-300" },
        transport: { badge: "bg-slate-700 text-slate-300" },
        adventure: { badge: "bg-emerald-900 text-emerald-300" },
        view: { badge: "bg-violet-900 text-violet-300" },
        relax: { badge: "bg-amber-800 text-amber-300" },
      };
      return styles[cat] || { badge: "bg-gray-700 text-gray-300" };
    }

    /**
     * Renders all dynamic data into the HTML placeholders.
     */
    function renderData() {
      // 1. Populate Header
      document.getElementById('main-title').textContent = data.meta.title;
      const subTitleEl = document.getElementById('sub-title');
      subTitleEl.textContent = `${data.meta.when} · `;
      const currencyNoteEl = document.createElement('span');
      currencyNoteEl.className = 'font-semibold';
      currencyNoteEl.textContent = data.meta.currencyNote;
      subTitleEl.appendChild(currencyNoteEl);

      // 2. Populate Flights Table
      const flightsContainer = document.getElementById('flights-table-container');
      const viaAthensTotal = (data.flights[1]?.cost ?? 0) + (data.flights[3]?.cost ?? 0);
      const directTotal = data.flights[2]?.cost ?? 0;
      const savingVsDirect = Math.max(0, Math.round(directTotal - viaAthensTotal));

      flightsContainer.innerHTML = `
        <table class="w-full text-sm">
          <thead class="bg-slate-800/70 text-slate-300">
            <tr>
              <th class="text-left p-2 font-medium">Route</th>
              <th class="text-left p-2 font-medium">Typical cost (pp)</th>
              <th class="text-left p-2 font-medium">Notes</th>
            </tr>
          </thead>
          <tbody class="text-slate-200">
            ${data.flights.map(f => `
              <tr class="border-t border-slate-700/70">
                <td class="p-2">${f.route}</td>
                <td class="p-2 font-semibold">£${f.cost}</td>
                <td class="p-2 text-slate-400">${f.note}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      `;
      document.getElementById('flights-tip').textContent = `Tip: Returning via Athens (total ~£${viaAthensTotal}) saves about £${savingVsDirect} vs a direct JTR→LON.`;

      // 3. Populate Hotels List
      const hotelsContainer = document.getElementById('hotels-list-container');
      hotelsContainer.innerHTML = data.hotels.map(h => `
        <li class="flex items-start justify-between gap-3">
          <div>
            <div class="font-medium text-slate-100">${h.city} — ${h.tier}</div>
            <div class="text-sm text-slate-400">${h.example}</div>
          </div>
          <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-slate-700 text-slate-300 whitespace-nowrap">${h.range}</span>
        </li>
      `).join('');

      // 4. Populate Day Cards
      const cardsContainer = document.getElementById('day-cards-container');
      const filteredDays = data.days.map(day => {
        if (activeFilters.size === 0) return day;
        const filteredItems = day.items.filter(item => activeFilters.has(item.cat));
        if (filteredItems.length === 0) return null;
        return { ...day, items: filteredItems };
      }).filter(day => day !== null);
      
      if (filteredDays.length === 0) {
        cardsContainer.innerHTML = `
          <div class="card text-center">
            <p class="text-slate-300">No activities match your filter.</p>
            <button data-filter="all" class="mt-4 rounded-full border px-3 py-1 text-sm bg-amber-600 text-white border-amber-600">
              Clear Filter
            </button>
          </div>
        `;
      } else {
        cardsContainer.innerHTML = filteredDays.map(day => {
          const safeDay = day || { date: "(unknown)", total: 0, items: [] };
          return `
            <div class="card">
              <div class="flex items-start justify-between gap-4">
                <div>
                  <h3 class="text-lg font-semibold text-slate-100">${safeDay.date}</h3>
                  <p class="text-sm text-slate-400">Romantic + educational pacing with exact timings & costs.</p>
                </div>
                <div class="text-right flex-shrink-0">
                  <div class="text-sm text-slate-400">Est. spend (per person)</div>
                  <div class="text-2xl font-bold text-emerald-400">£${Number(safeDay.total || 0).toFixed(2)}</div>
                </div>
              </div>
              <ol class="mt-4 space-y-3">
                ${safeDay.items.map(it => `
                  <li class="grid grid-cols-12 gap-3 items-start">
                    <div class="col-span-3 md:col-span-2 text-sm font-medium text-slate-300 whitespace-nowrap">${it.t || "—"}</div>
                    <div class="col-span-9 md:col-span-10">
                      <div class="flex flex-wrap items-center gap-2">
                        <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${catColor(it.cat).badge}">
                          ${it.cat || "item"}
                        </span>
                        <span class="font-medium text-slate-100">${it.a || "Activity"}</span>
                        ${typeof it.cost === 'number' ? `<span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-emerald-900 text-emerald-300">£${it.cost.toFixed(2)}</span>` : ''}
                      </div>
                      ${it.why ? `<p class="text-sm text-slate-400 mt-1">${it.why}</p>` : ''}
                    </div>
                  </li>
                `).join('')}
              </ol>
            </div>
          `;
        }).join('');
      }
    }

    /**
     * Updates the visual state of filter buttons based on `activeFilters`.
     */
    function updateFilterButtons() {
      const buttons = document.querySelectorAll('#filter-buttons button');
      buttons.forEach(button => {
        const filter = button.dataset.filter;
        if (!filter) return;
        
        const isActive = activeFilters.has(filter) || (filter === 'all' && activeFilters.size === 0);
        
        if (isActive) {
          button.className = "rounded-full border px-3 py-1 text-sm bg-amber-600 text-white border-amber-600 transition-colors"; // Active (Copper)
        } else {
          button.className = "rounded-full border px-3 py-1 text-sm bg-gray-900/60 backdrop-blur border-slate-600 text-slate-300 hover:bg-gray-700/80 transition-colors"; // Inactive
        }
      });
    }


    // --- WEBGL ENGINE ---

    /**
     * That image confirms the spectacular visual we are aiming for! That specific aesthetic of swirling, glowing
     * points creating an abstract, dynamic shape has a proper name and a specialized way of being created.
     * The moving purple element you are asking about is technically known as a GPGPU Particle System
     * (General-Purpose computing on Graphics Processing Units) that is rendering a Volumetric Data Field.
     *
     * How This Dynamic Animation Was Created
     * This effect is far more advanced than simple GIF animations or CSS transitions. It involves performing
     * complex physics calculations on your computer's graphics card in real-time.
     *
     * Here is the breakdown of the three core elements used in the earlier versions of the code to create this look:
     *
     * 1. The Physics: Fluid Simulation (curl Noise)
     * The secret to the realistic, swirling motion is the curl function inside the GLSL shader code.
     *
     * What it is: Instead of calculating gravity or wind, we use a mathematical model called Curl Noise
     * (a type of Perlin Noise). This generates a continuous, non-repeating flow field, similar to how
     * smoke or water currents move in real life.
     * The Result: Every single point (particle) in the scene is constantly checking this fluid field
     * to determine where it should move next, resulting in the organic, non-linear, and constantly
     * shifting patterns you see in the image.
     *
     * 2. The Engine: WebGL and FBOs
     * To handle the physics for tens of thousands of individual points (each one a particle) without
     * slowing down the website, we use the GPU:
     *
     * Three.js: This JavaScript library provides the framework for working with WebGL, handling the
     * scene, camera, and rendering.
     * FBO (Frame Buffer Objects): This is the core trick. We don't track particle positions in JavaScript
     * arrays. Instead, we encode the position and velocity of every particle into special textures.
     * The GPU reads the old position, calculates the new position based on the curl function, and writes
     * the results to a new texture—all in a single, parallel operation. This is why the animation
     * remains smooth even with thousands of points.
     *
     * 3. The Look: GLSL Shaders & Coloring
     * The final aesthetic—the purple glow, the subtle trails, and the specific shape—is applied via
     * specialized code blocks called Fragment Shaders (written in GLSL, the Graphics Library Shading Language).
     *
     * Coloring: The shader was given your desired color palette (Deep Purple, Neon Lilac) and told
     * to create a soft, glowing Gaussian distribution around each point, mimicking light scattering
     * through dust or energy.
     * Structural Shape: The shape (which looked like a swirling vortex or an abstract ribbon) was
     * controlled by the parameters of the curl noise function and how we initialized the starting
     * positions of the particles.
     *
     * In short, it's not a video or a simple image—it's real-time physics and mathematics
     * rendered on your graphics card to create a dynamic, luxurious visual field.
     */
    function initWebGL() {
      const canvas = document.getElementById('webgl-canvas');
      if (!canvas) return { setMode: () => {} };

      let scene, camera, renderer, clock, nebula, stars, columnCluster;

      // Mouse tracking vectors (current and target for smooth lerping)
      const mouse = new THREE.Vector2(0, 0);
      const targetMouse = new THREE.Vector2(0, 0);

      // Colors for "Deep Teal & Polished Copper" theme
      const warmColors = { // "Polished Copper"
        color1: new THREE.Color(0xB87333), // Copper
        color2: new THREE.Color(0xFFC300)  // Mango-Gold
      };
      const nightColors = { // "Deep Teal"
        color1: new THREE.Color(0x004D4D), // Deep Teal
        color2: new THREE.Color(0x008080)  // Lighter Teal
      };

      try {
        // 1. Scene
        scene = new THREE.Scene();
        clock = new THREE.Clock();

        // 2. Camera
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 5;

        // 3. Renderer
        renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

        // 4. Shaders
        
        // Main Nebula/Particle Shader
        const vertexShader = `
          varying vec2 vUv;
          void main() {
            vUv = uv;
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
          }
        `;
        
        const fragmentShader = `
          varying vec2 vUv;
          uniform float uTime;
          uniform vec2 uMouse;
          uniform vec2 uResolution;
          uniform vec3 uColor1;
          uniform vec3 uColor2;

          // 2D simplex noise
          vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }
          vec2 fade(vec2 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }

          float snoise(vec2 v) {
            const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
            vec2 i  = floor(v + dot(v, C.yy) );
            vec2 x0 = v -   i + dot(i, C.xx);
            vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
            vec2 x1 = x0.xy + C.xx - i1;
            vec2 x2 = x0.xy + C.zz;
            i = mod(i, 289.0);
            vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));
            vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);
            m = m*m; m = m*m;
            vec3 x = 2.0 * fract(p * C.www) - 1.0;
            vec3 h = abs(x) - 0.5;
            vec3 ox = floor(x + 0.5);
            vec3 a0 = x - ox;
            m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
            vec3 g;
            g.x  = a0.x  * x0.x  + h.x  * x0.y;
            g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);
            return 130.0 * dot(m, g);
          }

          // Fractional Brownian Motion (fBm)
          float fbm(vec2 v) {
            float f = 0.0;
            mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );
            f += 0.5000 * snoise(v); v = m * v;
            f += 0.2500 * snoise(v); v = m * v;
            f += 0.1250 * snoise(v); v = m * v;
            f += 0.0625 * snoise(v); v = m * v;
            return f / 0.9375;
          }
          
          void main() {
            vec2 st = (vUv - 0.5) * (uResolution / max(uResolution.x, uResolution.y));
            st *= 2.0; // Zoom
            
            vec2 mouseDist = (vUv - 0.5) - uMouse * vec2(1.0, -1.0);
            float mouseEffect = 1.0 - smoothstep(0.0, 0.1, length(mouseDist));

            float n = fbm(st + uTime * 0.1 + mouseEffect * 0.5);
            
            vec3 color = mix(uColor1, uColor2, smoothstep(-0.2, 0.2, n));
            float alpha = (0.5 + n * 0.5) * 0.5 + mouseEffect * 0.3;
            
            gl_FragColor = vec4(color, alpha);
          }
        `;

        // Starfield Shader
        const starVertexShader = `
          attribute float aScale;
          uniform float uTime;
          uniform float uPixelRatio;
          
          varying float vAlpha;
          
          void main() {
            vec4 modelPosition = modelMatrix * vec4(position, 1.0);
            
            // Simple twinkle effect
            vAlpha = 0.5 + (sin(uTime + position.x * 10.0) * 0.5);
            
            vec4 viewPosition = viewMatrix * modelPosition;
            gl_Position = projectionMatrix * viewPosition;
            gl_PointSize = aScale * 20.0 * uPixelRatio * (1.0 / -viewPosition.z);
          }
        `;
        
        const starFragmentShader = `
          varying float vAlpha;
          uniform vec3 uColor;
          
          void main() {
            float dist = length(gl_PointCoord - vec2(0.5));
            if (dist > 0.5) discard;
            
            gl_FragColor = vec4(uColor, vAlpha * (1.0 - dist * 2.0));
          }
        `;

        // 5. Objects
        
        // Nebula
        const nebulaGeometry = new THREE.PlaneGeometry(10, 10, 1, 1);
        const nebulaMaterial = new THREE.ShaderMaterial({
          uniforms: {
            uTime: { value: 0.0 },
            uMouse: { value: mouse },
            uResolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
            uColor1: { value: new THREE.Color(nightColors.color1) },
            uColor2: { value: new THREE.Color(nightColors.color2) },
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          transparent: true,
          depthWrite: false,
          blending: THREE.AdditiveBlending
        });
        nebula = new THREE.Mesh(nebulaGeometry, nebulaMaterial);
        nebula.position.z = -10; // Push behind stars
        scene.add(nebula);

        // Starfield
        const starCount = 5000;
        const starPositions = new Float32Array(starCount * 3);
        const scales = new Float32Array(starCount);
        for (let i = 0; i < starCount; i++) {
          starPositions[i * 3] = (Math.random() - 0.5) * 20;
          starPositions[i * 3 + 1] = (Math.random() - 0.5) * 20;
          starPositions[i * 3 + 2] = (Math.random() - 0.5) * 10;
          scales[i] = Math.random() * 0.5;
        }
        const starGeometry = new THREE.BufferGeometry();
        starGeometry.setAttribute('position', new THREE.BufferAttribute(starPositions, 3));
        starGeometry.setAttribute('aScale', new THREE.BufferAttribute(scales, 1));
        
        const starMaterial = new THREE.ShaderMaterial({
          uniforms: {
            uTime: { value: 0.0 },
            uPixelRatio: { value: Math.min(window.devicePixelRatio, 2) },
            uColor: { value: new THREE.Color(0xffffff) } // White stars
          },
          vertexShader: starVertexShader,
          fragmentShader: starFragmentShader,
          transparent: true,
          depthWrite: false,
          blending: THREE.AdditiveBlending
        });
        stars = new THREE.Points(starGeometry, starMaterial);
        scene.add(stars);

        // Columns
        columnCluster = new THREE.Group();
        const columnGeometry = new THREE.CylinderGeometry(0.02, 0.02, 2.5, 12);
        const columnMaterial = new THREE.MeshBasicMaterial({ 
          color: 0x80CBC4, // Teal, matching the dark theme
          wireframe: true,
          transparent: true,
          opacity: 0.25
        });
        
        for (let i = 0; i < 5; i++) {
          const column = new THREE.Mesh(columnGeometry, columnMaterial);
          const angle = (i / 5) * Math.PI * 2;
          column.position.x = Math.cos(angle) * 0.7;
          column.position.z = Math.sin(angle) * 0.7;
          column.rotation.x = Math.random() * 0.2;
          column.rotation.z = Math.random() * 0.2;
          columnCluster.add(column);
        }
        columnCluster.position.z = 2;
        scene.add(columnCluster);

        // 6. Event Listeners
        window.addEventListener('resize', () => {
          camera.aspect = window.innerWidth / window.innerHeight;
          camera.updateProjectionMatrix();
          renderer.setSize(window.innerWidth, window.innerHeight);
          renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
          nebulaMaterial.uniforms.uResolution.value.set(window.innerWidth, window.innerHeight);
          starMaterial.uniforms.uPixelRatio.value = Math.min(window.devicePixelRatio, 2);
        });

        window.addEventListener('mousemove', (e) => {
          // Normalize mouse position from -0.5 to 0.5
          targetMouse.x = (e.clientX / window.innerWidth) - 0.5;
          targetMouse.y = (e.clientY / window.innerHeight) - 0.5;
        });

        // 7. API and Animation Loop
        
        /**
         * Smoothly transitions the WebGL color palette.
         */
        const setMode = (mode) => {
          let targetColors = (mode === 'warm') ? warmColors : nightColors;
          // Use GSAP to tween the r, g, b properties of the THREE.Color object
          gsap.to(nebulaMaterial.uniforms.uColor1.value, { 
            r: targetColors.color1.r, 
            g: targetColors.color1.g, 
            b: targetColors.color1.b, 
            duration: 1.5 
          });
          gsap.to(nebulaMaterial.uniforms.uColor2.value, { 
            r: targetColors.color2.r, 
            g: targetColors.color2.g, 
            b: targetColors.color2.b, 
            duration: 1.5 
          });
        };

        /**
         * Main animation loop.
         */
        function animate() {
          const elapsedTime = clock.getElapsedTime();

          // Smooth mouse interpolation (lerp)
          mouse.x += (targetMouse.x - mouse.x) * 0.05;
          mouse.y += (targetMouse.y - mouse.y) * 0.05;

          // Update materials
          nebulaMaterial.uniforms.uTime.value = elapsedTime;
          nebulaMaterial.uniforms.uMouse.value.copy(mouse);
          starMaterial.uniforms.uTime.value = elapsedTime;
          
          // Rotate scene elements
          stars.rotation.y = elapsedTime * 0.02;
          columnCluster.rotation.y = elapsedTime * -0.05;
          
          // Parallax for columns (mouse y inverted for natural movement)
          columnCluster.position.x = mouse.x * 0.5;
          columnCluster.position.y = -mouse.y * 0.5;

          renderer.render(scene, camera);
          requestAnimationFrame(animate);
        }

        animate(); // Start the loop
        
        return { setMode }; // Return the public API

      } catch (e) {
        console.error("WebGL initialization failed:", e);
        canvas.style.display = 'none'; // Hide canvas, show fallback
        // Fallback gradient matches the "dark" theme
        document.body.style.backgroundColor = '#0F172A';
        document.body.style.backgroundImage = 'linear-gradient(to bottom, #0F172A 0%, #004D4D 100%)';
        return { setMode: () => {} }; // Return dummy API
      }
    }

    // --- APP INITIALIZATION ---
    document.addEventListener("DOMContentLoaded", () => {
      try {
        webGLApi = initWebGL(); // This returns an object { setMode }
        renderData(); // This populates the HTML with data
        
        // Bind mode toggle buttons (REMOVED)
        // document.getElementById('set-mode-warm')?.addEventListener('click', () => webGLApi.setMode('warm'));
        // document.getElementById('set-mode-dark')?.addEventListener('click', () => webGLApi.setMode('dark'));
        
        // Bind filter buttons
        const filterContainer = document.getElementById('filter-buttons');
        filterContainer.addEventListener('click', (e) => {
          const button = e.target.closest('button');
          if (button && button.dataset.filter) {
            const filter = button.dataset.filter;
            if (filter === 'all') {
              activeFilters.clear();
            } else {
              if (activeFilters.has(filter)) {
                activeFilters.delete(filter);
              } else {
                activeFilters.add(filter);
              }
            }
            renderData(); // Re-render cards
            updateFilterButtons(); // Update styles
          }
        });
        
        updateFilterButtons(); // Initial style setup
        
      } catch (error) {
        console.error("Initialization error:", error);
        // Fallback for critical failure
        document.body.style.backgroundColor = '#0F172A';
        document.body.style.backgroundImage = 'linear-gradient(to bottom, #0F172A 0%, #004D4D 100%)';
        
        // Still try to render the data if WebGL fails
        try {
          renderData();
        } catch (dataError) {
          console.error("Data rendering error after WebGL fail:", dataError);
        }
      }
    });

  </script>

</body>
</html>

